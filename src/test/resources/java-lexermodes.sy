%{
public class LexerMode {
%}

%token a:" an a symbol" = if ($c == 'a') {$+; return a;};
%token b:"a b symbol" [B] = if ($c == 'b') {$+; return b;};
%token c:"a c symbol" [C] {
  if ($c == 'c') {
    $+; 
    return c;
  };
}

%lexer [B] = if ($c == 'a') {$+; $l = DEFAULT_LEXER_MODE; return a;};
%lexer [C] = if ($c == 'a') {$+; $l = DEFAULT_LEXER_MODE; return a;};

%lexer {
  if ($c == 'b') {
    $l = B_LEXER_MODE;
    $+;
    return b;
  }
  
  if ($c == 'c') {
    $l = C_LEXER_MODE;
    $+;
    return c;
  }
}

%%

A : a
  | b
  | c
  ;
%%

  int charNum = 0;
  String expression = "(1 + 3) *4 / 5 + -20";
  private char getNextChar(boolean initialize) {
    if (initialize) {
      charNum = 0;
    }
    if (charNum < expression.length()) {
      return expression.charAt(charNum++);
    }
    return EOS;
  }

  private void ungetChar(char c) {
    charNum --;
    if (charNum < 0 || expression.charAt(charNum) != c) {
      throw new RuntimeException("Error putting a character back");
    }
  }

  private int parserError(int state, int token, int top, String message) {
    System.out.println("An error occurred in state " + state + " with token " + token + " on the position " + top);
    System.out.println(message);
    parserPrintStack();
    return ERROR_RE_ATTEMPT;
  }
  
}