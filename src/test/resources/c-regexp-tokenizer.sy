%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "$$b.h"

char currentString[1024];
  
%}

%union {
  char * s;
}

%lexer = {
  while ($c <= ' ' && $c > '\0') {
    $+;
  }
}

%token A /(a|b)c/ {
  printf("A:%s\n", $r);
  strcat(currentString, "A");
  return $t;
}

%token B /d(.|.|e)f/ {
  printf("B:%s\n", $r);
  strcat(currentString, "B");
  return $t;
}

%token C /(a)/ {
  printf("C:%s\n", $r);
  strcat(currentString, "C");
  return $t;
}

%token D /.?x+y*(a|b)*/ {
  printf("D:%s\n", $r);
  strcat(currentString, "D");
  return $t;
}

%token E /_?[A-Za-z][A-Za-z0-9-]*/ {
  printf("E:%s\n", $r);
  strcat(currentString, "E");
  return $t;
}

%token F /[]]/ {
  printf("F:%s\n", $r);
  strcat(currentString, "F");
  return $t;
}

%token G /[-]/ {
  printf("G:%s\n", $r);
  strcat(currentString, "G");
  return $t;
}

%token H /[]-]/ {
  printf("H:%s\n", $r);
  strcat(currentString, "H");
  return $t;
}

%token I /[^A-Za-z]*/ {
  printf("I:%s\n", $r);
  strcat(currentString, "I");
  return $t;
}

%start List;

%name List : "anything";
%%

List     : List ListElem
         | ListElem
         ;
         
ListElem : A
         | B
         | C
         | D
         | E
         | F
         | G
         | H
         | I
         ;

%%

// END OF GRAMMAR
  
int charNum = 0;
char * expression = "_un-da bc daf a fxxxabaa ] - 0123 ac";

char StxNextChar()
{
    if (charNum < strlen(expression)) {
      return expression[charNum++];
    }
    return EOS;
}

void StxUngetChar(char c) {
    charNum --;
}

int StxError(int state, int token, int top, char * message)
{
    printf("An error occurred in state %d with token %d on the position %d\n", state, token, top);
    printf("%s\n", message);
#ifdef DEBUG
    StxPrintStack();
#endif
    return ERROR_RE_ATTEMPT;
}

#ifdef DEBUG
char staticToStringValue[1024];

char * StxToString(TSTACK value)
{
    sprintf(staticToStringValue, "%d", value.number);
    return staticToStringValue;
}
#endif

int main(char *argv) 
{
    if (StxParse()) {
        printf("Output=%s\n", currentString);
    }
    exit (0);
}
 
